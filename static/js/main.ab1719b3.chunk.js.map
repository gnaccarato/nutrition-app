{"version":3,"sources":["components/Title.js","components/Form.js","components/Nutrition.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","class","React","Component","Form","onSubmit","this","props","getNutrition","type","name","placeholder","className","Nutrition","calories","carbs","protein","fat","error","api_id","api_key","App","state","undefined","_callee","e","food","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","parsed","length","_this","setState","nutrients","ENERC_KCAL","CHOCDF","PROCNT","FAT","stop","components_Title","components_Form","components_Nutrition","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab1719b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Title extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>                \r\n                <h3 class=\"header_title\">Macronutrient and Calorie Finder <i class=\"fas fa-utensils\"></i></h3>\r\n                <h5>Enter Food to Obtain Nutritional Info</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return(\r\n            <div class=\"search_form\">\r\n                <form onSubmit={this.props.getNutrition}>\r\n                    <input type=\"text\" name=\"food\" placeholder=\"Enter Food...\" className=\"form-control input-sm\"></input>\r\n                    <button className=\"btn btn-block btn-primary\">Search <i class=\"fas fa-search\"></i></button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nclass Nutrition extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"nutrition_info\">\r\n               {this.props.calories && <h5>Calories: <span> {this.props.calories}</span></h5>}\r\n               {this.props.carbs && <h5>Carbs: <span> {this.props.carbs}</span></h5>}\r\n               {this.props.protein && <h5>Protein: <span>{this.props.protein}</span></h5>}\r\n               {this.props.fat && <h5>Fat: <span>{this.props.fat}</span></h5>}\r\n               {this.props.error && <h5><span>{this.props.error}</span></h5>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nutrition;","import React, { Component } from 'react';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Nutrition from './components/Nutrition';\nimport './App.css';\n\nconst api_id = '117aef37';\nconst api_key = 'a6661a20b3715db55bab42723193a3b1';\n\nclass App extends Component {\n  state = {\n    calories: undefined,\n    carbs: undefined,\n    protein: undefined,\n    fat: undefined,\n    error: undefined\n  }\n  \n  getNutrition = async (e) => {\n    e.preventDefault();\n    const food = e.target.elements.food.value;\n    const api_call = await fetch(`https://api.edamam.com/api/food-database/parser?ingr=${food}&app_id=${api_id}&app_key=${api_key}`);\n    const data = await api_call.json();\n    // console.log(data);\n    \n    if (food && data.parsed.length !== 0) {           \n      this.setState({\n      calories: data.parsed[0].food.nutrients.ENERC_KCAL,\n      carbs: data.parsed[0].food.nutrients.CHOCDF,\n      protein: data.parsed[0].food.nutrients.PROCNT,\n      fat: data.parsed[0].food.nutrients.FAT,\n      error: ''\n    })\n    } else {\n      this.setState({\n        calories: undefined,\n        carbs: undefined,\n        protein: undefined,\n        fat: undefined,\n        error: 'Enter valid food name'\n      })\n    }\n        \n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Title />\n          <Form getNutrition={this.getNutrition}/>\n          <Nutrition\n            calories={this.state.calories}\n            carbs={this.state.carbs}\n            protein={this.state.protein}\n            fat={this.state.fat}\n            error={this.state.error}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}